Problem 1:
// NOTE: Saving and loading is not implemented.
- Some game mechanics:
  + Before the wolf blows for the first time, game objects will not receive any damage.
  + It is not recommended to place too many heavy objects on a light object, since the light object receives too much impulse from the heavy object and gets destroyed.
- How to play:
  + The wolf and the pig must present in the game area. The game will not start if this requirement is not fulfilled.
  + Move the arrow to specify the angle
  + Hold your finger on the wolf. A breath bar will appear to the left of the wolf. When you lift your finger, the wolf will blow with the power in the breath bar and at the angle specified.

Problem 2:

a)
Angle adjustment: One finger rotation.
Power projectile: This is not manually adjustable. The user will hold the finger on the wolf and the breath bar will appear. The power of the projectile will be the level of the breath bar when the user lifts the finger.

Integration of wolf breath power with the physics engine
It is possible to apply impulse to the object in Box2D physics engine by providing a vector that specifies the direction and magnitude of the impulse.
The other possibility is apply force, then we need to consider how long the force should be apply and keep apply the force in that duration. It is a bit more complex coding, so I chose the first method. 

b)
I decided to use Open Source Physics Engine (Box2D) to avoid reinventing the wheels and enjoy the performance from Box2D (which is written in C++ and optimized).

Design of Box2D:
- It has b2World class, which represents the physic world. User of this class instantiate physical objects (b2Body) and simulate physics using Step(timeStep, numVelocityIterations, numPositionIterations) function.
- By Box2D's definition, b2Body represent the whole body of an object, which is made of one or multiple parts (b2Fixture). The real physical parts that collides together will be fixture (e.g. blades of a fan), and the whole body (the fan as a whole) will move after the collision.
- b2Body will define the position of the body, angular rotation of the body and whether the body is static (e.g. ground) or dynamic (e.g. blocks).
- b2Fixture defines the physical property of the part of the body, such as restitution coefficient, friction coefficient, density (per meter square) and the shape (b2Shape) of the body. This means one body can have different parts with different physical property (not really necessary for PS5, though).
- Box2D allows user to store a pointer to the user data that is associated with the body or the fixture. For PS5, I stored a pointer to the corresponding GameObject in the body (except for the ground).
- b2Shape is the base class for shapes. There are a number of shapes, which includes circle and polygon. Collision is handled separately from the shape definition and is split into several files for different method and different stages of the collision.
- Box2D also allow us to register listener. The most notable being b2ContactListener which allows us to extract impulse of the collision and/or control behavior of the collision.

The design of Box2D is more modular and more complex than the physic engine done in PS4, since it is designed for complex simulation (e.g. it is possible to model a spinning table fan whose blade collides with an obstruction, or model a billiard table) and to cater for many purposes. However, there are quite a number of points that I can learn from the design of Box2D: separate physical attributes from shape, so shape can be extended; separate different stages of the collision algorithm and use observer pattern to obtain collision data and/or interfere with the collision.

c)
Interactions between game objects:
- Wolf and breath does not interact with each other (no collision)
- Wolf does not take damage from collision
- Other interactions are based on impulse on the object (breath, pig and block takes different damage depending on the impulse and their physical properties)
- Before user makes the first move, collision does not generate damage

Interactions between game objects must be implemented with a b2ContactListener from Box2D, since we need the impulse data between the objects and what 2 objects are colliding.
Damage calculation is implemented in the object classes. Currently, all damage based interactions use the same method to calculate damage (using impulse), but it is possible to defines different damage calculation for some type of object. I call the damage calculation code from PostSolve function in b2ContactListener, where I decide if the damage should be applied.
Enforcing whether 2 objects should collide or not based on the type is implemented in PreSolve function of b2ContactListener.
"Breath destroys straw block on contact" type of interaction (although not used anywhere in my implementation) can also be implemented in PreSolve function.

There doesn't seem to be other way to do it as accurate as this method with Box2D. The Observer pattern used in Box2D allows developer to specify special action/behavior when some event happens without the physics engine knowing anything about the developer's design.

d) I choose to use NSTimer to implement starting the game because it is the simplest to configure to fire a function to update the screen every 1/60 of a second, automatically start and easy to stop.
NSTimer doesn't seem to create new thread, so the view will hang when user moves the scroll view.

NSThread and Grand Central Dispatch can prevent the bug above from happening.

Between GCD and NSThread, GCD is more powerful, since it manages threads for us.

I am not sure whether the code below worksâ€¦, but if it works, the implementation is simple enough.
- (void) updateGameObjects {
  // Update GameObjects
  if (kGameMode == kGameModePlay) {
    // Call itself. Will this cause a stack overflow?
    dispatch_after(/* TIME_STEP */, /* CURRENT_QUEUE */, ^{ [self updateGameObjects]; });
  }
}

- (void) playMode {
  // Configures for play mode
  dispatch_async(/* Background Queue */, ^{ [self updateGameObjects]; });
}

NSThread has NSRunLoop, and we can access the NSTimer from NSRunLoop, so it probably is possible to implement the update with NSThread. However, we have to create and manage the thread ourselves, so the implementation may be more complex.

Problem 3:

Since I am using an external physics engine, it is not necessary to test the physics engine. I only need to do integration testing.

Testing is done after a new feature or an effect is added, or when the code is refactored. Not all features tested in every test since it will take too much time and inefficient. Testing is usually targeted at the features that are most likely affected by the change, plus some extra testing on actions to set up the environment for the feature to be tested (e.g. placing objects in game area).

When a new feature is added, testing will focus on the effect of the new feature, other features that are closely related to the new feature and when the feature should be/not be available. Take direction arrow as an example.
1. User should be able to move the direction arrow and it should change color when it is being moved. Its position and rotation is dependent on the wolf.
2. The direction arrow should specify the initial direction of the wolf breath.
3. It should only show up during play mode and user interaction should not propagate to it during level builder mode.
Testing for a certain feature may be deferred if the feature that the test depends on is not available.

Profiling is occasionally done to check for memory leaks and/or to reduce the memory usage. I profiled my program in 2 occasions. Once before starting on PS5 to make sure all the objects are cleaned up when it should be, and to improve memory usage. Second time to make sure there are no memory leak during integration with Box2D (shape function in GameObject).

Black-box testing:
- Feature (un)availability: making sure the feature is available/not available in certain mode. Below are lists of features that should only be available in their respective mode.
  + Level builder mode:
    . Palette: User interaction with items on palette.
    . GameObject: User move, rotate, resize (if applicable), change block type (for GameBlock).
    . Save and load level
    . Clear the game area (reset)
    . Start the game
  + Play mode:
    . GameBreath (everything related to it)
    . GameWolf: Blow breath and angle selection. Animation (suck air, wolf blowing). Angle degree, arrow, breath bar images.
    . Stop the game
- Level builder mode:
  + Palette: The palette should show one wolf, one pig and one block on the palette at the beginning and after every reset.
  + Object interaction:
    . GameWolf: The wolf cannot be rotated or resized. It can be moved around.
    . GamePig: The pig cannot be rotated. It can be moved around. It can be resized only if it is in game area.
    . GameBlock: Block type can (only) be changed by single tap on the block (moving the object around, etc. should not change the type of block). It can be moved around. It can be rotated and resized only if it is in game area.
    . There is an upper and lower limit on resizing object, if applicable.
  + Dragging the objects around:
    . Irrespective of the dragging path or starting position, if the game object lands inside game area (the center of the view lands inside game area), it should stay in the game area at the position it lands.
    . Irrespective of the dragging path or starting position, if the game object lands outside game area (the center of the view lands outside game area), it should be removed (for GameBlock) or restored to the palette (for GamePig and GameWolf).
    . When a GameBlock is dragged from the palette and placed inside game area, a new GameBlock should be created on the palette.
    . Simultaneous movement of objects should be possible (up to the limit permitted by hardware and iOS). This means any combination of simultaneously moving object from palette and game area result in the individual objects following the above rules.
  + Reset button:
    . When the reset button is tapped, the palette should be restored as described above, and the game area should be cleared of all game objects.

- Play mode:
  + GameObject:
    . The objects should fall down under effect of gravity
    . The objects should interacts with each other (collide, bounce off) each other realistically
    . It should be possible to make game object (except GameWolf) disappear (can destroy the object), providing that enough impulse is applied.
  + GameWolf:
    . The degree, directional arrow should appear and stay in play mode
    . The breath bar should appear when long hold on the wolf and disappear when user lifts finger
    . The directional arrow should be movable with one touch, and there is a upper limit and lower limit on the angle
    . The Wolf should animate (inhale/exhale, wind sucking) when user lifts the finger from the long hold.
  + GameBreath
    . Should only appear after the wolf starts to blow air (animation).
    . Should fly out at the direction pointed by the arrow.
    . Should disperse if it goes out of bounds x-axis-wise.
    . Should disperse if it stops moving (or looks like so).
  + The view should continue to update even when the user scroll the game area [FAILED].

- Switching between play mode and level builder mode:
  + When the user ends the current game (play mode) and returns to level builder mode, the game area should show the original design of the level and not the game play aftermath.
    . GameObject should be movable, rotatable, resizable (if applicable)
    . GameWolf should not respond to long hold gesture
    . Any GameBreath remaining should be cleared off
    . Destroyed GameObject in play mode (except for GameBreath) should reappear in level builder mode at the original position with the original look
  + Start and end game multiple times. Every time we start the game, it should start fresh, i.e. no leftover artifacts from previous play.
  + End game in different situation: just started game, during gesturing, after gesture to make wolf blow but before it blows, after some object is destroyed, etc. Make sure it works as described above.

Glass-box testing:

- Level builder mode:
  + Palette: Observe from the log that the palette should never contain more than one wolf, one pig and one block, and the palette should always contain a block.
  + Reset button:
    . Make sure from the log and profiling that when the button is clicked, there should only be 3 GameObject in the memory (1 GameWolf, 1 GamePig, 1 GameBlock).

- Play mode:
  + GameWolf:
    . From the logging, make sure the angle pointed by the arrow correspond to the angle recorded in game.
    . From the logging, make sure the power recorded correspond to the level of the breath bar.
  + GameObject:
    . For objects that receives damage, check that the object is damaged by setting the alpha of the UIImageView.

- Switching between play mode and level builder mode:
  + (Mode consistency, as described in black-box testing):
    . After returning to level builder mode, sliding finger around the position of the arrow should not generate log message.
    . b2Body of all the GameObject should be destroyed

Problem 4:
- Breath bar animation
- Wolf animation: wolf inhale/exhale, wind sucking
- Blowing sequence: breath will only appear when the wolf exhale
- Pig changes sprite after damage reaches certain threshold.
- Wind disperse animation (a bit buggy)

Problem 5:

The design of the components can possibly improve depending on the features of the game. The current set of features doesn't require the design to be drastically changed, so I cannot picture how I would modify the design of the game.

If memory becomes a problem, I probably will have a class to manage the images.

However, I do think the interfaces of the classes could have been better. The current interface of the classes is quite messy, and it is hard for me to keep the thing under control. GameObject is one such example where its redundancy shows in GameBreath.

Bonus Problem:
a. Around 50-60 hours?

b. I have never written or designed a game, so I don't know how things should be organized. I also have never written a UI intensive program such as Huff n Puff. I did a lot of trial and error on the design of the program (the real connection between the components is much more complicated and messed up than described in diagrams). The result is the code is more manageable after every refactor, but the interface between the components is quite patchy.

I understand a good design leads to better coding efficiency. However, without the knowledge of how the components would interact with each other, it is pretty hard to come up with a good design (the components are there, but the interface is hard to define).

c. Nope. The process is part of learning.

d.
Problem set 3 is quite a big jump and I had a lot of problem with it. Probably push a bit of the content to problem set 2.
Problem set 4 can be good or bad depending on how it is done. I just follow the instruction for the game engine, so not much is learnt. For designing part, I follow minimalist approach in my design: I designs a game engine that is extensible for requirement in PS5, but no more than that. As a result, the design doesn't apply for PS5 when I plug in external game engine since it is designed differently.